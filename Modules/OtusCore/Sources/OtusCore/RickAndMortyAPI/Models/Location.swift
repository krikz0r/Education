//
// Location.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** Модель локации из Rick and Morty */
public struct Location: Codable, Hashable {

    /** Идентификатор локации */
    public var id: Int?
    /** Имя локации */
    public var name: String?
    /** Тип локации */
    public var type: String?
    /** Измерение, в котором находится локация */
    public var dimension: String?
    /** Список персонажей, виденных в локации */
    public var residents: [String]?
    /** URL на информацию о локации */
    public var url: String?
    /** Дата и время создания локации */
    public var created: Date?

    public init(id: Int? = nil, name: String? = nil, type: String? = nil, dimension: String? = nil, residents: [String]? = nil, url: String? = nil, created: Date? = nil) {
        self.id = id
        self.name = name
        self.type = type
        self.dimension = dimension
        self.residents = residents
        self.url = url
        self.created = created
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case id
        case name
        case type
        case dimension
        case residents
        case url
        case created
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(id, forKey: .id)
        try container.encodeIfPresent(name, forKey: .name)
        try container.encodeIfPresent(type, forKey: .type)
        try container.encodeIfPresent(dimension, forKey: .dimension)
        try container.encodeIfPresent(residents, forKey: .residents)
        try container.encodeIfPresent(url, forKey: .url)
        try container.encodeIfPresent(created, forKey: .created)
    }
}

